const Status = {
  SUCCESS_HEADER: -1,
  SUCCESS_EOF: -2,
  ERROR_TIMEOUT: -3,
  ERROR_EXCEPTION: -4,
};

const connections = {};
let nextConnectionID = 1;
const encoder = new TextEncoder();

self.addEventListener("message", async (event) => {
  if (event.data.close) {
    const connectionID = event.data.close;
    delete connections[connectionID];
    return;
  }

  if (event.data.getMore) {
    const connectionID = event.data.getMore;
    let { curOffset, value, reader, intBuffer, byteBuffer } = connections[connectionID];

    if (!value || curOffset >= value.length) {
      try {
        const readResponse = await reader.read();

        if (readResponse.done) {
          delete connections[connectionID];
          Atomics.store(intBuffer, 0, Status.SUCCESS_EOF);
          Atomics.notify(intBuffer, 0);
          return;
        }

        curOffset = 0;
        connections[connectionID].value = readResponse.value;
        value = readResponse.value;
      } catch (error) {
        console.log("Request exception:", error);
        const errorBytes = encoder.encode(error.message);
        const written = errorBytes.length;
        byteBuffer.set(errorBytes);
        intBuffer[1] = written;
        Atomics.store(intBuffer, 0, Status.ERROR_EXCEPTION);
        Atomics.notify(intBuffer, 0);
      }
    }

    const curLen = Math.min(value.length - curOffset, byteBuffer.length);
    byteBuffer.set(value.subarray(curOffset, curOffset + curLen), 0);

    Atomics.store(intBuffer, 0, curLen);
    Atomics.notify(intBuffer, 0);
    curOffset += curLen;
    connections[connectionID].curOffset = curOffset;

    return;
  }

  const connectionID = nextConnectionID++;
  const intBuffer = new Int32Array(event.data.buffer);
  const byteBuffer = new Uint8Array(event.data.buffer, 8);

  try {
    const response = await fetch(event.data.url, event.data.fetchParams);
    const headers = Array.from(response.headers.entries());
    const headerObj = {
      headers,
      status: response.status,
      connectionID,
    };

    const headerText = JSON.stringify(headerObj);
    const headerBytes = encoder.encode(headerText);
    const written = headerBytes.length;
    byteBuffer.set(headerBytes);
    intBuffer[1] = written;

    connections[connectionID] = {
      reader: response.body.getReader(),
      intBuffer,
      byteBuffer,
      value: undefined,
      curOffset: 0,
    };

    Atomics.store(intBuffer, 0, Status.SUCCESS_HEADER);
    Atomics.notify(intBuffer, 0);
  } catch (error) {
    console.log("Request exception:", error);
    const errorBytes = encoder.encode(error.message);
    const written = errorBytes.length;
    byteBuffer.set(errorBytes);
    intBuffer[1] = written;
    Atomics.store(intBuffer, 0, Status.ERROR_EXCEPTION);
    Atomics.notify(intBuffer, 0);
  }
});

self.postMessage({ inited: true });
